---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  id="usernameModal"
  class="fixed inset-0 z-50 hidden items-center justify-center p-4 bg-black/80 backdrop-blur-sm"
>
  <div
    class="relative w-full max-w-md p-8 rounded-2xl bg-gradient-to-br from-black via-red-500/10 to-black border-2 border-red-500/30 shadow-[0_0_50px_rgba(227,19,55,0.3)]"
  >
    <button
      id="closeModalBtn"
      class="absolute top-4 right-4 text-white/60 hover:text-white text-2xl font-bold transition-colors"
    >
      Ã—
    </button>

    <h3 class="font-sans text-2xl font-bold text-white mb-6">
      {t("modal.title")}
    </h3>

    <form id="usernameForm" class="space-y-4">
      <div>
        <input
          type="text"
          id="usernameInput"
          placeholder={t("modal.placeholder")}
          class="w-full px-4 py-3 bg-black/50 border-2 border-red-500/30 rounded-lg text-white placeholder-white/40 focus:outline-none focus:border-red-500 transition-colors font-sans"
          required
          autocomplete="off"
        />
        <p id="errorMessage" class="mt-2 text-red-500 text-sm font-sans hidden">
        </p>
      </div>

      <button
        type="submit"
        id="submitBtn"
        class="w-full px-6 py-3 text-lg font-bold text-white rounded-lg transition-all duration-300 hover:scale-105 bg-gradient-to-r from-red-500 to-red-500/80 hover:shadow-[0_0_20px_rgba(227,19,55,0.5)]"
      >
        {t("modal.searchButton")}
      </button>
    </form>
  </div>
</div>

<script>
  import { getLangFromUrl, useTranslations } from "@/i18n/utils";
  import { buildLocalizedPath } from "@/i18n/url-utils";

  const lang = getLangFromUrl(new URL(window.location.href));
  const t = useTranslations(lang);

  const modal = document.getElementById("usernameModal");
  const closeModalBtn = document.getElementById("closeModalBtn");
  const usernameForm = document.getElementById(
    "usernameForm"
  ) as HTMLFormElement;
  const usernameInput = document.getElementById(
    "usernameInput"
  ) as HTMLInputElement;
  const errorMessage = document.getElementById("errorMessage");

  function openModal() {
    modal?.classList.remove("hidden");
    modal?.classList.add("flex");
    usernameInput?.focus();
  }

  function closeModal() {
    modal?.classList.add("hidden");
    modal?.classList.remove("flex");
    usernameInput.value = "";
    errorMessage?.classList.add("hidden");
  }

  function showError(message: string) {
    if (errorMessage) {
      errorMessage.textContent = message;
      errorMessage.classList.remove("hidden");
    }
  }

  function hideError() {
    errorMessage?.classList.add("hidden");
  }

  window.addEventListener("openUsernameModal", openModal);

  closeModalBtn?.addEventListener("click", closeModal);

  modal?.addEventListener("click", (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  usernameForm?.addEventListener("submit", (e) => {
    e.preventDefault();
    hideError();

    const username = usernameInput.value.trim().toLowerCase();

    if (!username) {
      showError(t("modal.errorEmpty"));
      return;
    }

    if (username.length < 3) {
      showError(t("modal.errorTooShort"));
      return;
    }

    // Navigate to user page with username as query param, respecting current language
    const currentLang = getLangFromUrl(new URL(window.location.href));
    const userPath = buildLocalizedPath("/user", currentLang, `?u=${encodeURIComponent(username)}`);
    window.location.href = userPath;
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && !modal?.classList.contains("hidden")) {
      closeModal();
    }
  });
</script>
