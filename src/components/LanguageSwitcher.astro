---
import { languages, type Locale } from "@/i18n/utils";

interface Props {
	currentLang: Locale;
}

const { currentLang } = Astro.props;
---

<div class="relative inline-block" id="langSwitcher">
  <button
    id="langBtn"
    class="flex items-center gap-2 px-3 py-2 text-sm font-medium text-white/70 hover:text-white transition-colors rounded-lg hover:bg-white/5"
    aria-label="Change language"
  >
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"
      ></path>
    </svg>
    <span class="uppercase font-bold">{currentLang}</span>
    <svg
      class="w-3 h-3 transition-transform duration-200"
      id="langDropdownIcon"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <div
    id="langMenu"
    class="hidden absolute right-0 top-full mt-2 w-40 bg-black/95 backdrop-blur-sm border border-red-500/30 rounded-lg shadow-[0_0_20px_rgba(227,19,55,0.2)] overflow-hidden z-50"
  >
    {
      Object.entries(languages).map(([lang, label]) => {
        return (
          <button
            data-lang={lang}
            class={`lang-link w-full text-left block px-4 py-2 text-sm font-medium transition-colors duration-200 ${
              lang === currentLang
                ? "bg-red-500/20 text-white"
                : "text-white/70 hover:bg-red-500/10 hover:text-white"
            }`}
          >
            {label}
          </button>
        );
      })
    }
  </div>
</div>

<script>
	import { switchLocale } from "@/i18n/url-utils";
	import { isValidLocale, type Locale } from "@/i18n/config";

	const langBtn = document.getElementById("langBtn");
	const langMenu = document.getElementById("langMenu");
	const langDropdownIcon = document.getElementById("langDropdownIcon");

	langBtn?.addEventListener("click", (e) => {
		e.stopPropagation();
		langMenu?.classList.toggle("hidden");
		langDropdownIcon?.classList.toggle("rotate-180");
	});

	document.addEventListener("click", (e) => {
		if (!langBtn?.contains(e.target as Node)) {
			langMenu?.classList.add("hidden");
			langDropdownIcon?.classList.remove("rotate-180");
		}
	});

	// Handle language switching with query parameter preservation
	const langLinks = langMenu?.querySelectorAll(".lang-link");
	langLinks?.forEach((button) => {
		button.addEventListener("click", () => {
			const targetLang = button.getAttribute("data-lang");

			// Validate locale before switching
			if (!targetLang || !isValidLocale(targetLang)) {
				console.error(`[LanguageSwitcher] Invalid locale: ${targetLang}`);
				return;
			}

			const currentUrl = new URL(window.location.href);
			const newUrl = switchLocale(currentUrl, targetLang as Locale);

			// Navigate with full page reload
			window.location.href = newUrl;
		});
	});
</script>
